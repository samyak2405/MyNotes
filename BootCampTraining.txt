Lab setup
	1. Java11 with path setting in windows
	2. STS
	3. GIT
	4. MySQL 8x database with workbench

Full Stack Development
	1. FrontEnd
		ES6
		Veu/React/Angular
		Node.js
	2. BackEnd
		Java 11
		Spring
		Spring REST
		Spring Microservices(Netflix OSS)
		JMS(Kafka)
		GIT
	3. Infra developement
		AWS
		Docker
		Kubernetes
		
Java 11 (Java is used because it is good for data processing and data manipulation)
Some Important key pointers in java
	1. Java supports both the styling of code in Development
		1.1 Object Oriented Code approach: rule based approach
		1.2 Functional oriented approach: free-style coding (Stream APIs)
		
	2. Java supports various kind of application development
		2.1 JSE --> Java Standard Edition :--- POS(Point Of Sale)/ Desktop(Core Java/AWT/Swing)
		2.2 JEE --> Java Enterprise Edition :--- Web/Enterprise(B2C/B2B Ex.PayU) App. Enterprise means commercial
		2.3 JME --> Java Mobile Edition :--- Blackberry/ Android
		
	3. Java have various IDE for developement
		3.1 JDeveloper
		3.2 Netbeans
		3.3 JDev
		3.4 STS (free)
		3.5 IBM RAD(Rational Application Developer) (paid)
		3.6 Eclipse (free)
		3.7 Intellj (paid)
		
	4. Java have various versions in market(1.1,1.2,.......,1.8.....1.11,....1.16,...........1.21) 
	
	5. Java supports various principles for development	
		5.1 SOLID principles(oodesign.com): (Design Pattern: Solution of reoccuring problem in development we use design pattern.)
		5.2 OOP:-- Abstraction, Encapsulation, Modularity, Hierarchy
		
	6. Topics to cover in java
		6.1. Class/Object/Constructor
		6.2. I/O
		6.3. Array
		6.4. Collection Generics
		6.5. JDBC
		6.6. Exception handling
		6.7. New Feature in Java 11
			6.7.1. Date and time API
			6.7.2. Stream API
			6.7.3. Default Method in Interface
			6.7.4. For each loop
			6.7.5. Lambda Expression
			6.7.6. Tools for developement/ Performance
			
Conventions in Java
1. Class name must start with Capital letter
2. Package name must start with small letter(package itself a container which contains the class/properties/methods etc)
3. Object/Identifiers always be in small letter
4. Method must be in camel case

Java 11
1. Class cannot be private, static and protected
2. Class can be public, package, abstract and final
3. stubs-> client code
4. main is the entry point
5. Shortcut: Type SYSO and press ctrl+space for System.out.println()
6. After compilation java code is converted to two files
	.java
	.class
7. Classes in Java
	1. Bussiness class(Which contains the business/Operational methods)
	2. Main class (Which contains the main method)
	3. Bean class (POJO Class: Which contains the properties/ methods) -> Bean class contains respective setters/getters.

8. Their are various modifiers that will be applicable at class level
	1. Public: If scope modifier is public at the class level it means it would be applicable entire in java project
	2. package: The package modifier treat java as default modifier which means the scope is restrict for the accessibility in the same package.
	3. final: - Reserved keyword in java.
			  - Restrict the scope of variable, method and class
			  - If we make class as final it means we can't extend further
			  - If we make method as final it means we can't override
			  - If we make property as final it means we can't change
	4. Abstract: - Abstract is a universal keyword in java which modify the accessibility of the class. 
				 - The abstract class contains the implemented and unimplemented methods.
				 - The unimplemented methods are always abstract methods.
				 - We cannot create the instance of abstract class but we can inherit.
				 
	
	
9. Relationship between the classes: We can achieve the relationship in java using inheritance.
	Their are various kinds of inheritances supported by java
		1. Single level
				A
				|
				|
				|
				B
		2. MultiLevel
				A
				|
				|
				B
				|
				|
				C
		3. hierarchical
				A
				|
			 -------
			 |		|
			 B      C
		4. Hybrid (Not supported in java) (Multiple + hierarchical)
		
		
		5. Multiple(not supported in java)
		
Assignment: Create the dummy classes with dummy method class A, B, C, D inside the new package inheritance with reference of dummy methods
	a,b,c,d,e in different classes and access all the level of inheritance.
	
10. TODO: JNI->Java Native interface, Multithreading with concurrency.

11. Array: Collection of homogeneous elements traversing in sequential manner.
	3 types of array we can implement in java
	1. Primitive type array
	2. Wrapper class array
	3. Custom array
	
12. Java Client(CustomerClient) --- Java Business(CustomerBusiness) --- Java Bean class(Customer)

Assignment: Implement rest three methods in existing customer application with proper output Update, Delete and Search.

13. I/Os-> We generally use input output in java in two ways
	1. Using scanner class(Taking console input/output)
		Scanner class belongs to IO utility and belongs to java.util package.
		We generally use System.in and System.out for Input/Output in console respectively.
	2. File Input/Output(All respective file operations)
		
		
Assignment: design a menu in client class
	welcome to CMS Application
	Enter the choice
		1. Create Customer
		2. Update Customer
		3. Delete Customer
		4. Search Customer
		5. Exist
	Switch case with for loop
	
14. Interface is a flexible approach which is using for the declaration of services(Methods).
	We can create an instance(reference) of the interface but we can't instantiate it.
	We can create the interface using interface keyword in java
	Replacement of Abstract class
	Save memory.
	
15. Collection in Generics
	Collection is an object in java which can hold multiple objects.
	Collection is an advance data structure which is implemented by various classes like 
	arrayList, LinkedList, hashMap , TreeMap, Vector, hashSet, TreeSet, etc
	- We use Generics(<>) with collections for making object type safe.
	Various algorithms are implemented by collection api in java which can be implemented in various ways
	All Collection Libraries are part of java.util.* package.
	
Assignment : Replace the existing the Array implementation with Arraylist class.

16. Set collection can be implemented by hashset or treeset. hashset contains the random value and treeset contains all the value in sorted order.
	Set won't allow any duplicate element in collection.
	In set implementation we can add and remove randomly that is why set faster than list.
	
	
Assignment : In the Existing arraylist implementation use set.

17. Map: 
		- map is an interface which will implement the hashmap and treemap in the existing collection.
		- map is the fastest collection which contains the key pair value in which the key is unique and value can be duplicate.
		- We can add , search and remove a value from map in random manner.
		- We can implement in map the hashmap and treemap in hashmap contains value in random manner and vice versa treemap contains the value in sorted order.

18. Exception Handling
	- Java supports extensive exception handling mechanism for handling varities of exception based on the user input.
	- In exception handling framework, throwable is the superclass which will handle all the error and exception objects i.e. exception object can be handle by the developer code using exception framework and error objects are handle by the OS.
	- All the exception classes are the part of exception package java.lang.Exception in Exception framework.
	- There are 5 important keywords, which is using the exception handling 
		1. try
		2. catch
		3. finally
		4. throw
		5. throws
	- Note: Its responsibility of developer to close the objects in the finally block as part of best practices.
	- We can create custom exceptions with custom messages for the project after extending the exception class.
	
DEMO 1:
	Handling exception with try,catch and finally.

DEMO 2:
	Creating custom exceptions for the project with custom messages.
	Scenario: Banking application when a user withdraws some money from the ATM.
	
Assignment: Create custom exception classes
	1. CustomerNotFound can be applicable for update and delete
	2. RecordAlreadyExists: Create in the com.payu.exception class and map those exceptions to the customer services.
	
JDBC API
	Stands for Java database connectivity which is used to create the connection between the java code and Backend database.
	We generally use java.sql.* package for making the connection and executing the queries with various apis.
	We used JDBC 4.0 API  now-a-days for Java-8,11 and 16.
	For executing the sql query for database manipulation we use 3 types of statements
		1. Statement
		2. PreparedStatement
		3. CallableStatement
		
		Note: We always prefer PreparedStatement because it becomes SQL Injection preventive most of the time.
	For making the connection we use the connection class and load the "Driver" based on the database in JDBC code.
Assignment: In the existing code, perform two more operations in table
	1. Deletion
	2. Updation
	
Major assignment
	1. create a package with name of com.payu.dao (Data Access Object) with respective interface CustomerDAOInterface with implementation in CustomerDAOImpl class with all respective methods:
		1.createCustomer
		2.deleteCustomerById(int id)
		3.updateCustomerByid(int id)
		4.listCustomers()
		
		Client -> Business ->DAO
Assignment
	1. The list of customer must be displayed in tabular form(use Stringformatter class)
	2. Change the connection implementation in the complete existing code and create the connection using DButils class.
	3. Write comments
		1. Create all the comments above the methods as per the screenshots and remove all comments in the existing project.
	4. Date and Time API
		Assignment: Whenever application runs then display the welcome message with current date and time using datetime API.
			Welcome to CMS Application (CURRENT_DATE, CURRENT_TIME, CURRENT_YEAR); ->Done
	5. for-each loop
		Assignment: In the existing project replace the all list method implementation in for-each loop
	6. Lambda Expression with stream API: stream api in java medium.com
		Assignment: 
	7. Java 8/11 doc tools
	8. Default method in Interface

Lambda Expression
	- Old Way
		List<Integer> numList = Arrays.asList(2,5,7,9,10,20,30,40);
		int sum = 0;
		Iterator<Integer> iterator = numList.iterator();
		while (iterator.hasNext()) {
			int number = iterator.next();
			if (number< 10) {
			sum += number;
			}
		}
	- Lambda Way
		int sum = numList.stream().filter(num -> num < 10).mapToInt(num -> num).sum();
	
	- do not need a name and can be implemented outside of classes
	- Lambda expressions are an anonymous function, meaning that they have no name or identifier.
	- passed as a parameter to another function
	- Syntax: 
		1. parameter->expression
		2. (parameter1, parameter2)->expression
	- Eg
		List<Integer> list = Arrays.asList(1,2,3,4,5,6);
		list.forEach((n)->{System.out.println(n);});
		
	- callable anywhere in the program
	- 
		
Stream API
	- Stream API internally implemented the functional programming concepts in which the output of one function would be the next function
	- Stream API has written on top of the Collection for manipulating and filtering the data rather than writing the explicit code by the developers.
	- The all API is part of java.util.stream package in java container.
	- Using of Stream API makes our code shorter which improves the performance.
	- Nowadays, onwards Java8 projects are using stream API extensively.
	
	Used to process collections of Objects.
	A stream is a sequence of objects that supports various methods which can be pipelined to produce the desired result.
	Features
		1. Not a Data structure instead it takes input from the Collections, Arrays or I/O channels.
		2. Don't change the original data structure, they only provide the result as per the pipelined methods.
	
	1. map() method: Transform one object into another by applying a function.
		Eg: convert a list of string into list of integer by applying Integer.valueOf() method to each string in the input list.
		syntax: Stream.map(Function mapper)
	2. Filter() method: It filters elements based upon a condition.
		Eg: to filter a list to print only even numbers
		syntax: filter(Predicate condition)
	
	Program to use map and filter method in java
	
	Eg 
	1: Convert a list of String into a list of Integer and then filter all even numbers.
	
	List<String> numbers = Arrays.asList("1","2","3","4","5","6");
	List<Integer> even = numbers.stream()
								.map(s->Integer.valueOf(s))
								.filter(number->number%2==0)
								.collect(Collectors.toList());
								
	2: Print a list of Employees having gender == "Female"
	
	List<Employee> empList = empList.stream()
									.filter(e->e.getGender().equals("Female"))
									.forEach(e->System.out.println(e));
	
	Reference: https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#builder--
	
Default method in Interface
	1. Default method in interface will implement a generic implementation in various classes
	2. For creating the default method, we need to use the default keyword
	
Assignment :Wherever possible in the existing code apply the stream api. 
	
Git and Github
1. Git is a version control distributed system which is managing the project in collabarative way.
2. There are various version control system available in market:
    2.1 VCS
    2.2 Tortoise SVN
    2.3 Bit Bucket
    2.4 Git 
3. VCS and Tortoise SVN are paid, Git is free for learning and small MSME companies.
4. Git has 2 components:
    4.1 Git SCN (Git Client installed in local machine)
    4.2 Github (cloudRepo in which we will push and pull the code in the collabarative manner).

5. For managing the project, we will use Git Lifecycle commands.

Commands: 
	1. git --verison --> show the current version of git.
	2. ls -la --> show hidden file/directory
	3. ls -> show list of files/directory
	4. cat [File_name] -> to show the contents of the given file.
	5. touch [File_name] -> to create the file.
	6. git init -> Initiate the git project and create the git configuration file. Git configuration file will maintain the git stage configuration files.
	7. pwd -> current working directory.
	Note: Whenever we are creating any file in git we need to put(or add) that file in git staging area.
	8. git add [NAME_OF_FILE] -> To add the file to the staging area.
	9. git add . -> To add multiple files to staging area.
	10. git status -> It will show the status, which will show in green color to be moved to staging area. Red color means it is not present inside git staging area.
	11. HTTPS git repo: https://github.com/samyak2405/wibmo-repoT.git
	12. git remote add origin [Origin URL here] ->to add/configure the origin to which the local git branch will pull/push the code from/to.

Assignment: 

UML
	1. UML is a Unified Modeling Langauge which helps to us to design and simplify the system visibility.
	2. We generally used the UML 4+1 View(1 View is called the Usecase view).
	Rest of the use case depends on the business requirements.
		3. Using the UML we can easily communicate and document better using the system artifacts.
		4. UML helps in visualization of the problem and solutions.
		5. It helps reduction of costing in re-work.
Assignment: As per the problem statement of CMS design the use case diagram, With actors, activities with system boundaries.

Assignment: Class diagram is the part of logical view which elaborate the respective properties, methods and visibility.
Define the class diagram with properties and methods of admin, student and professor.

Assignment
	Design client layer with complete menu of CRS application with scanner class.

Welcome to CRS Application
	//Time and date

1. Login
2. Registration of Student
3. Update Password
4. Exit

1. Login: Enter Username and password and role.
	If Admin: Display admin ops
	If Student: display student ops
	If Prof: Display prof ops
Note: Beautification of the menu

Design Database(Schema) in sql wit All table structures and relationships

Define all respective dao layers with queries in all business services.

Group D: Student with user
Note: Push in the git.

	